name: CI

on:
  push:
    branches: "main"
    tags: ["*"]
  pull_request:
  release:

jobs:
  test:
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.julia-arch }} - ${{ matrix.build-sandbox }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        julia-version:
          - "^1.6.0-0"
          - "nightly"
        julia-arch:
          - "x64"
        build-sandbox:
          - ""
          - "build local sandbox"

    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - name: Cache artifacts
        uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Manually instantiate
        run: julia --project -e 'using Pkg; Pkg.instantiate()'
      - name: Build Sandbox
        run: julia --project deps/build_local_sandbox.jl
        if: ${{ matrix.build-sandbox != '' }}
      - name: Ensure sandbox is from artifact
        run: |
          julia --project -e 'using Test, UserNSSandbox_jll, Artifacts;
            @info("sandbox", UserNSSandbox_jll.sandbox_path)
            @test any(startswith(UserNSSandbox_jll.sandbox_path, d) for d in Artifacts.artifacts_dirs())
          '
        if: ${{ matrix.build-sandbox != '' }}
      - name: Ensure sandbox is locally built
        run: |
          julia --project -e 'using Test, UserNSSandbox_jll, Scratch;
            @info("sandbox", UserNSSandbox_jll.sandbox_path)
            @test startswith(UserNSSandbox_jll.sandbox_path, Scratch.scratch_dir())
          '
        if: ${{ matrix.build-sandbox == '' }}
      - uses: julia-actions/julia-runtest@v1

  Documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: "^1.6.0-0"
      - name: Cache artifacts
        uses: actions/cache@v2
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-docs-${{ env.cache-name }}-${{ hashFiles('**/docs/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-docs-${{ env.cache-name }}-
            ${{ runner.os }}-docs-
            ${{ runner.os }}-
      - uses: julia-actions/julia-docdeploy@releases/v1
        env:
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
